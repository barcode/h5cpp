#define GOOGLE_STRIP_LOG 1

#include <gtest/gtest.h>

#include <h5cpp/core>
#include "struct.h"
#include <h5cpp/io>

#include "abstract.h"




template<class T>
std::enable_if_t<std::is_integral_v<T> || std::is_floating_point_v<T>, bool>
binaryEqual(const T& l, const T& r)
{
    return (std::memcmp( (const void*) &l, (const void*) &r, sizeof(T)) == 0);
}

#define VAR_SEQ_FOR_EACH(macro, data, ...)                                      \
    BOOST_PP_SEQ_FOR_EACH(macro, data, BOOST_PP_VARIADIC_TO_SEQ(__VA_ARGS__))

#define DO_OUT(R, data, child) << t.child << " "
#define DO_CMP(R, data, child) binaryEqual(l.child, r.child) &&

#define MAKE_COUT_AND_COMPARE(T,...)                            \
    std::ostream& operator<<(std::ostream& out, const T& t) {   \
        out VAR_SEQ_FOR_EACH(DO_OUT, , __VA_ARGS__);            \
        return out;                                             \
    }                                                           \
    bool binaryEqual(const T& l, const T& r) {                \
        return VAR_SEQ_FOR_EACH(DO_CMP, , __VA_ARGS__) true;    \
    }

MAKE_COUT_AND_COMPARE(
    SomeNameSpace::StructType,
    field1, field2, field3, field4, field5,
    field6, field7, field8, field9
    )





typedef ::testing::Types<
	H5CPP_TEST_PRIMITIVE_TYPES,
	sn::struct_type
> BasicRdWrApTestTypes;

//used as chunk size
constexpr std::size_t chunk_sz = 4096;
//amount of data generated by calling generate<>
constexpr std::size_t data_sz = 2 * chunk_sz;
//offset when writing into the middle of a chunk
constexpr std::size_t in_chunk_offset = chunk_sz / 2;

template<class T>
std::vector<T> generate(std::size_t seed) {
	std::vector<T> vec (data_sz);
	std::mt19937 gen{seed};
	std::uniform_int_distribution<std::uint8_t> dist{0, 255};
	std::uint8_t* begin = static_cast<std::uint8_t*>(static_cast<void*>(&vec.front()));
	std::uint8_t* end = static_cast<std::uint8_t*>(static_cast<void*>(&vec.back() + 1));
	for(std::uint8_t* it = begin; it < end; ++it )
		*it = dist(gen);
	return vec;
}

#include "basic_read_write_append_test_cases.hpp"
